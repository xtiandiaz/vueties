@use 'sass:map';
@use 'sass:list';
@use '@design-tokens/palette';

@mixin safe-area($top: true, $bottom: true) {
  $padding-bottom: 0px;
  $padding-top: 0px;
  
  @if $top {
    $padding-top: env(safe-area-inset-top);
  }
  @if $bottom {
    $padding-bottom: env(safe-area-inset-bottom);
  }
  
  height: calc(100% - $padding-top - $padding-bottom);
  overflow: auto;
  padding-bottom: $padding-bottom;
  padding-top: $padding-top;
}

@mixin size($value) {
  height: $value;
  width: $value;
}

@mixin linear-gradient($angle, $color-stops...) {
  & {
    $light-scheme-colors: ();
    $dark-scheme-colors: ();
    $positions: ();
    
    @each $color-stop in $color-stops {
      $color-key: list.nth($color-stop, 1);
      $alpha: list.nth($color-stop, 2);
      $positions: list.append($positions, list.nth($color-stop, 3));
      
      $light-scheme-colors: list.append(
        $light-scheme-colors, 
        rgba(map.get(palette.$light-scheme-colors, $color-key), $alpha),
        $separator: comma
      );
      $dark-scheme-colors: list.append(
        $dark-scheme-colors, 
        rgba(map.get(palette.$dark-scheme-colors, $color-key), $alpha),
        $separator: comma
      );
    }
    
    background-image: linear-gradient($angle, list.zip($light-scheme-colors, $positions)...);
    
    @media (prefers-color-scheme: dark) {
      background-image: linear-gradient($angle, list.zip($dark-scheme-colors, $positions)...);
    }
  }
}
